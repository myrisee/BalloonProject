// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(9)
            {
                { typeof(global::Balloon.Shared.DataModels.GameStatus), 0 },
                { typeof(global::Balloon.Shared.DataModels.GameInfo), 1 },
                { typeof(global::Balloon.Shared.DataModels.UserInfo), 2 },
                { typeof(global::Balloon.Shared.MessagePacks.LoginResponse), 3 },
                { typeof(global::Balloon.Shared.MessagePacks.SessionInfo), 4 },
                { typeof(global::Balloon.Shared.MessagePacks.StartRequest), 5 },
                { typeof(global::Balloon.Shared.MessagePacks.StartResponse), 6 },
                { typeof(global::Balloon.Shared.MessagePacks.UpdateRequest), 7 },
                { typeof(global::Balloon.Shared.MessagePacks.UpdateResponse), 8 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Balloon.Shared.DataModels.GameStatusFormatter();
                case 1: return new MessagePack.Formatters.Balloon.Shared.DataModels.GameInfoFormatter();
                case 2: return new MessagePack.Formatters.Balloon.Shared.DataModels.UserInfoFormatter();
                case 3: return new MessagePack.Formatters.Balloon.Shared.MessagePacks.LoginResponseFormatter();
                case 4: return new MessagePack.Formatters.Balloon.Shared.MessagePacks.SessionInfoFormatter();
                case 5: return new MessagePack.Formatters.Balloon.Shared.MessagePacks.StartRequestFormatter();
                case 6: return new MessagePack.Formatters.Balloon.Shared.MessagePacks.StartResponseFormatter();
                case 7: return new MessagePack.Formatters.Balloon.Shared.MessagePacks.UpdateRequestFormatter();
                case 8: return new MessagePack.Formatters.Balloon.Shared.MessagePacks.UpdateResponseFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Balloon.Shared.DataModels
{

    public sealed class GameStatusFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.DataModels.GameStatus>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.DataModels.GameStatus value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Balloon.Shared.DataModels.GameStatus Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Balloon.Shared.DataModels.GameStatus)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Balloon.Shared.DataModels
{
    public sealed class GameInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.DataModels.GameInfo>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // GameStatus
        private static global::System.ReadOnlySpan<byte> GetSpan_GameStatus() => new byte[1 + 10] { 170, 71, 97, 109, 101, 83, 116, 97, 116, 117, 115 };
        // StartTime
        private static global::System.ReadOnlySpan<byte> GetSpan_StartTime() => new byte[1 + 9] { 169, 83, 116, 97, 114, 116, 84, 105, 109, 101 };
        // CurrentWin
        private static global::System.ReadOnlySpan<byte> GetSpan_CurrentWin() => new byte[1 + 10] { 170, 67, 117, 114, 114, 101, 110, 116, 87, 105, 110 };
        // BetAmount
        private static global::System.ReadOnlySpan<byte> GetSpan_BetAmount() => new byte[1 + 9] { 169, 66, 101, 116, 65, 109, 111, 117, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.DataModels.GameInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserId, options);
            writer.WriteRaw(GetSpan_GameStatus());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.GameStatus>(formatterResolver).Serialize(ref writer, value.GameStatus, options);
            writer.WriteRaw(GetSpan_StartTime());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.StartTime, options);
            writer.WriteRaw(GetSpan_CurrentWin());
            writer.Write(value.CurrentWin);
            writer.WriteRaw(GetSpan_BetAmount());
            writer.Write(value.BetAmount);
        }

        public global::Balloon.Shared.DataModels.GameInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __UserId__ = default(string);
            var __GameStatus__IsInitialized = false;
            var __GameStatus__ = default(global::Balloon.Shared.DataModels.GameStatus);
            var __StartTime__IsInitialized = false;
            var __StartTime__ = default(global::System.DateTime);
            var __CurrentWin__IsInitialized = false;
            var __CurrentWin__ = default(double);
            var __BetAmount__ = default(double);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        __UserId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8386111882673348935UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 29557UL) { goto FAIL; }

                                __GameStatus__IsInitialized = true;
                                __GameStatus__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.GameStatus>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 6301783160589022531UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28265UL) { goto FAIL; }

                                __CurrentWin__IsInitialized = true;
                                __CurrentWin__ = reader.ReadDouble();
                                continue;

                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7883925481800692819UL:
                                if (stringKey[0] != 101) { goto FAIL; }

                                __StartTime__IsInitialized = true;
                                __StartTime__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7959390431487485250UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                __BetAmount__ = reader.ReadDouble();
                                continue;

                        }

                }
            }

            var ____result = new global::Balloon.Shared.DataModels.GameInfo(__UserId__, __BetAmount__);
            if (__GameStatus__IsInitialized)
            {
                ____result.GameStatus = __GameStatus__;
            }

            if (__StartTime__IsInitialized)
            {
                ____result.StartTime = __StartTime__;
            }

            if (__CurrentWin__IsInitialized)
            {
                ____result.CurrentWin = __CurrentWin__;
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.DataModels.UserInfo>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // Username
        private static global::System.ReadOnlySpan<byte> GetSpan_Username() => new byte[1 + 8] { 168, 85, 115, 101, 114, 110, 97, 109, 101 };
        // Password
        private static global::System.ReadOnlySpan<byte> GetSpan_Password() => new byte[1 + 8] { 168, 80, 97, 115, 115, 119, 111, 114, 100 };
        // Currency
        private static global::System.ReadOnlySpan<byte> GetSpan_Currency() => new byte[1 + 8] { 168, 67, 117, 114, 114, 101, 110, 99, 121 };
        // Balance
        private static global::System.ReadOnlySpan<byte> GetSpan_Balance() => new byte[1 + 7] { 167, 66, 97, 108, 97, 110, 99, 101 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.DataModels.UserInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserId, options);
            writer.WriteRaw(GetSpan_Username());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Username, options);
            writer.WriteRaw(GetSpan_Password());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Password, options);
            writer.WriteRaw(GetSpan_Currency());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Currency, options);
            writer.WriteRaw(GetSpan_Balance());
            writer.Write(value.Balance);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::Balloon.Shared.DataModels.UserInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __UserId__IsInitialized = false;
            var __UserId__ = default(string);
            var __Username__ = default(string);
            var __Password__ = default(string);
            var __Currency__IsInitialized = false;
            var __Currency__ = default(string);
            var __Balance__IsInitialized = false;
            var __Balance__ = default(double);
            var __Name__IsInitialized = false;
            var __Name__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        __UserId__IsInitialized = true;
                        __UserId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604897285731157UL:
                                __Username__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7237970109966541136UL:
                                __Password__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 8746956283274491203UL:
                                __Currency__IsInitialized = true;
                                __Currency__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28538298379821378UL) { goto FAIL; }

                        __Balance__IsInitialized = true;
                        __Balance__ = reader.ReadDouble();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        __Name__IsInitialized = true;
                        __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Balloon.Shared.DataModels.UserInfo(__Username__, __Password__);
            if (__UserId__IsInitialized)
            {
                ____result.UserId = __UserId__;
            }

            if (__Currency__IsInitialized)
            {
                ____result.Currency = __Currency__;
            }

            if (__Balance__IsInitialized)
            {
                ____result.Balance = __Balance__;
            }

            if (__Name__IsInitialized)
            {
                ____result.Name = __Name__;
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Balloon.Shared.MessagePacks
{
    public sealed class LoginResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.MessagePacks.LoginResponse>
    {
        // UserId
        private static global::System.ReadOnlySpan<byte> GetSpan_UserId() => new byte[1 + 6] { 166, 85, 115, 101, 114, 73, 100 };
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };
        // Expiration
        private static global::System.ReadOnlySpan<byte> GetSpan_Expiration() => new byte[1 + 10] { 170, 69, 120, 112, 105, 114, 97, 116, 105, 111, 110 };
        // Success
        private static global::System.ReadOnlySpan<byte> GetSpan_Success() => new byte[1 + 7] { 167, 83, 117, 99, 99, 101, 115, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.MessagePacks.LoginResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_UserId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserId, options);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Token, options);
            writer.WriteRaw(GetSpan_Expiration());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Serialize(ref writer, value.Expiration, options);
            writer.WriteRaw(GetSpan_Success());
            writer.Write(value.Success);
        }

        public global::Balloon.Shared.MessagePacks.LoginResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Balloon.Shared.MessagePacks.LoginResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266614641493UL) { goto FAIL; }

                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        ____result.Token = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Expiration().Slice(1))) { goto FAIL; }

                        ____result.Expiration = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32496501618079059UL) { goto FAIL; }

                        ____result.Success = reader.ReadBoolean();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SessionInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.MessagePacks.SessionInfo>
    {
        // Token
        private static global::System.ReadOnlySpan<byte> GetSpan_Token() => new byte[1 + 5] { 165, 84, 111, 107, 101, 110 };
        // Expiration
        private static global::System.ReadOnlySpan<byte> GetSpan_Expiration() => new byte[1 + 10] { 170, 69, 120, 112, 105, 114, 97, 116, 105, 111, 110 };
        // UserInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_UserInfo() => new byte[1 + 8] { 168, 85, 115, 101, 114, 73, 110, 102, 111 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.MessagePacks.SessionInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Token());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Token, options);
            writer.WriteRaw(GetSpan_Expiration());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Serialize(ref writer, value.Expiration, options);
            writer.WriteRaw(GetSpan_UserInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.UserInfo>(formatterResolver).Serialize(ref writer, value.UserInfo, options);
        }

        public global::Balloon.Shared.MessagePacks.SessionInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Token__ = default(string);
            var __Expiration__ = default(global::System.DateTimeOffset);
            var __UserInfo__ = default(global::Balloon.Shared.DataModels.UserInfo);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474147942228UL) { goto FAIL; }

                        __Token__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Expiration().Slice(1))) { goto FAIL; }

                        __Expiration__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTimeOffset>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 8027224647565407061UL) { goto FAIL; }

                        __UserInfo__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.UserInfo>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Balloon.Shared.MessagePacks.SessionInfo(__Token__, __Expiration__, __UserInfo__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StartRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.MessagePacks.StartRequest>
    {
        // BetAmount
        private static global::System.ReadOnlySpan<byte> GetSpan_BetAmount() => new byte[1 + 9] { 169, 66, 101, 116, 65, 109, 111, 117, 110, 116 };
        // CurrencyCode
        private static global::System.ReadOnlySpan<byte> GetSpan_CurrencyCode() => new byte[1 + 12] { 172, 67, 117, 114, 114, 101, 110, 99, 121, 67, 111, 100, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.MessagePacks.StartRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_BetAmount());
            writer.Write(value.BetAmount);
            writer.WriteRaw(GetSpan_CurrencyCode());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.CurrencyCode, options);
        }

        public global::Balloon.Shared.MessagePacks.StartRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Balloon.Shared.MessagePacks.StartRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_BetAmount().Slice(1))) { goto FAIL; }

                        ____result.BetAmount = reader.ReadDouble();
                        continue;
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CurrencyCode().Slice(1))) { goto FAIL; }

                        ____result.CurrencyCode = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StartResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.MessagePacks.StartResponse>
    {
        // TicketId
        private static global::System.ReadOnlySpan<byte> GetSpan_TicketId() => new byte[1 + 8] { 168, 84, 105, 99, 107, 101, 116, 73, 100 };
        // GameInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_GameInfo() => new byte[1 + 8] { 168, 71, 97, 109, 101, 73, 110, 102, 111 };
        // UserInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_UserInfo() => new byte[1 + 8] { 168, 85, 115, 101, 114, 73, 110, 102, 111 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.MessagePacks.StartResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_TicketId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TicketId, options);
            writer.WriteRaw(GetSpan_GameInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.GameInfo>(formatterResolver).Serialize(ref writer, value.GameInfo, options);
            writer.WriteRaw(GetSpan_UserInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.UserInfo>(formatterResolver).Serialize(ref writer, value.UserInfo, options);
        }

        public global::Balloon.Shared.MessagePacks.StartResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Balloon.Shared.MessagePacks.StartResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7226435056034867540UL:
                                ____result.TicketId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 8027224647347822919UL:
                                ____result.GameInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.GameInfo>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 8027224647565407061UL:
                                ____result.UserInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.UserInfo>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.MessagePacks.UpdateRequest>
    {
        // TicketId
        private static global::System.ReadOnlySpan<byte> GetSpan_TicketId() => new byte[1 + 8] { 168, 84, 105, 99, 107, 101, 116, 73, 100 };
        // NeedToStop
        private static global::System.ReadOnlySpan<byte> GetSpan_NeedToStop() => new byte[1 + 10] { 170, 78, 101, 101, 100, 84, 111, 83, 116, 111, 112 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.MessagePacks.UpdateRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_TicketId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TicketId, options);
            writer.WriteRaw(GetSpan_NeedToStop());
            writer.Write(value.NeedToStop);
        }

        public global::Balloon.Shared.MessagePacks.UpdateRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Balloon.Shared.MessagePacks.UpdateRequest();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7226435056034867540UL) { goto FAIL; }

                        ____result.TicketId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_NeedToStop().Slice(1))) { goto FAIL; }

                        ____result.NeedToStop = reader.ReadBoolean();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UpdateResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Balloon.Shared.MessagePacks.UpdateResponse>
    {
        // TicketId
        private static global::System.ReadOnlySpan<byte> GetSpan_TicketId() => new byte[1 + 8] { 168, 84, 105, 99, 107, 101, 116, 73, 100 };
        // GameInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_GameInfo() => new byte[1 + 8] { 168, 71, 97, 109, 101, 73, 110, 102, 111 };
        // UserInfo
        private static global::System.ReadOnlySpan<byte> GetSpan_UserInfo() => new byte[1 + 8] { 168, 85, 115, 101, 114, 73, 110, 102, 111 };
        // IsWin
        private static global::System.ReadOnlySpan<byte> GetSpan_IsWin() => new byte[1 + 5] { 165, 73, 115, 87, 105, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Balloon.Shared.MessagePacks.UpdateResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_TicketId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TicketId, options);
            writer.WriteRaw(GetSpan_GameInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.GameInfo>(formatterResolver).Serialize(ref writer, value.GameInfo, options);
            writer.WriteRaw(GetSpan_UserInfo());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.UserInfo>(formatterResolver).Serialize(ref writer, value.UserInfo, options);
            writer.WriteRaw(GetSpan_IsWin());
            writer.Write(value.IsWin);
        }

        public global::Balloon.Shared.MessagePacks.UpdateResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Balloon.Shared.MessagePacks.UpdateResponse();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7226435056034867540UL:
                                ____result.TicketId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 8027224647347822919UL:
                                ____result.GameInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.GameInfo>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 8027224647565407061UL:
                                ____result.UserInfo = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Balloon.Shared.DataModels.UserInfo>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 474213741385UL) { goto FAIL; }

                        ____result.IsWin = reader.ReadBoolean();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

