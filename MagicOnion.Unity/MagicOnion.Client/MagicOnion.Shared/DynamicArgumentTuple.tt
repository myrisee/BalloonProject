<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using MessagePack;
using MessagePack.Formatters;

namespace MagicOnion
{
    // T2 ~ T20

<# for(var i = 2; i <= 20; i++) {
    var typeArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0}", x)));
    var methodArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0} item{0}", x)));
    var defaultArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0} default{0}", x)));
    var itemArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("item{0}", x)));
 #>
    
    [MessagePackObject]
    public struct DynamicArgumentTuple<<#= typeArgs #>>
    {
<# for(var j = 1; j <= i; j++) { #>
        [Key(<#= j - 1  #>)]
        public readonly T<#= j#> Item<#= j #>;
<# } #>

        [SerializationConstructor]
        public DynamicArgumentTuple(<#= methodArgs #>)
        {
<# for(var j = 1; j <= i; j++) { #>
            Item<#= j#> = item<#= j #>;
<# } #>
        }
    }

    public class DynamicArgumentTupleFormatter<<#= typeArgs #>> : IMessagePackFormatter<DynamicArgumentTuple<<#= typeArgs #>>>
    {
<# for(var j = 1; j <= i; j++) { #>
        readonly T<#= j #> default<#= j #>;
<# } #>

        public DynamicArgumentTupleFormatter(<#= defaultArgs #>)
        {
<# for(var j = 1; j <= i; j++) { #>
            this.default<#= j #> = default<#= j #>;
<# } #>
        }

        public void Serialize(ref MessagePackWriter writer, DynamicArgumentTuple<<#= typeArgs #>> value, MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(<#= i #>);
            var resolver = options.Resolver;
<# for(var j = 1; j <= i; j++) { #>
            resolver.GetFormatterWithVerify<T<#= j #>>().Serialize(ref writer, value.Item<#= j #>, options);
<# } #>
        }

        public DynamicArgumentTuple<<#= typeArgs #>> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            var resolver = options.Resolver;
            var length = reader.ReadArrayHeader();

<# for(var j = 1; j <= i; j++) { #>
            var item<#= j #> = default<#= j #>;
<# } #>

            for (var i = 0; i < length; i++)
            {
                switch (i)
                {
<# for(var j = 1; j <= i; j++) { #>
                    case <#= j - 1 #>:
                        item<#= j #> = resolver.GetFormatterWithVerify<T<#= j #>>().Deserialize(ref reader, options);
                        break;
<# } #>
                    default:
                        reader.Skip();
                        break;
                }
            }

            return new DynamicArgumentTuple<<#= typeArgs #>>(<#= itemArgs #>);
        }
    }
<# } #>
}